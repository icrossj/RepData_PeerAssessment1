getwd()
activity <- read.csv("activity.csv",stringsAsFactors = FALSE)
a <- tapply(activity$steps,activity$date,sum, na.rm=TRUE)
hist(a,main="Total Number of Steps per Day",xlab = "Total Steps")
a <- tapply(activity$steps,activity$interval,mean, na.rm=TRUE)
answer = as.data.frame(as.table(a))
colnames(answer) <- c("Interval","AvgSteps")
head(answer)
plot(time_interval,avg_steps,type="l", ylab ="Average Number of Steps", xlab="")
plot(answer$Interval,answer$avg_steps,type="l", ylab ="Average Number of Steps", xlab="")
plot(answer$Interval,answer$AvgSteps,type="l", ylab ="Average Number of Steps", xlab="")
time_interval <- as.numeric(levels(answer$Interval))
avg_steps <- as.numeric(answer$AvgSteps)
plot(time_interval,avg_steps,type="l", ylab ="Average Number of Steps", xlab="")
time_interval
?mutate
library(dpylr)
library()
library(dplyr)
?mutate
head(activity)
tail(activity)
activity
is.na(activity)
test <- is.na(activity)
head(test)
?replace
?revalue
library(plyr)
?replace
?revalue
?impute
time_interval
avg_steps
hi1 <- cbind(time_interval,avg_steps)
head(hi1)
hi1$time_interval
hi2 <- as.data.frame(hi1)
head(hi2)
hi2$time_interval
hi2[hi2$time_interval == 200]
hi2[hi2$time_interval == 200,]
response <- hi2[hi2$time_interval == 200,]
response
response[,2]
response[,1]
head(hi2)
response <- hi2[hi2$time_interval == 5,]
response[,1]
?mapply
activity
length(activity)
head(activity)
nrow(activity)
?rep
test22 = rep(NA,10)
test22
length(test22)
head(answer)
plot(answer$Interval,answer$AvgSteps)
answer$Interval <- as.numeric(levels(answer$Interval))
answer$AvgSteps <- as.numeric(levels(answer$AvgSteps))
answer$AvgSteps <- as.numeric(answer$AvgSteps)
plot(answer$Interval,answer$AvgSteps)
plot(answer$Interval,answer$AvgSteps,type="l", ylab ="Average Number of Steps", xlab="")
activity[1,]
?impute
activity[1,]
is.na(activity[1,])
condition <- is.na(activity[1,])
condition[1]
is.na(activity[1,])
activity[1,]
testcase <- activity[1,]
testcase[1]
testcase[2]
testcase[3]
testcase[3,]
testcase <- activity[1,]
testcase
testcase[3]
feed <- testcase[3]
feed
feed +3
new_activity_set
new_activity_set <- rep(NA,10)
new_activity_set[1]
new_activity_set[1] <- feed
new_activity_set[1]
new_activity_set
answer
answer
answer[answer$Interval == 5,]
temp <- answer[answer$Interval == 5,]
temp
temp[2]
new_activity_set <- rep(NA,nrows(activity))
find_mean_steps <- function(interval){
temp <- answer[answer$Interval == interval,] #hope it finds it...
temp2 <- temp[2]
return(temp2)
}
impute <- function(row_feed){
condition <- is.na(row_feed)
if(condition[1]){
steps <- find_mean_steps(row_feed[2])
return (steps)
}
else{
steps <- row_feed[2]
return (steps)
}
}
nrows
nrow
new_activity_set <- rep(NA,nrow(activity))
find_mean_steps <- function(interval){
temp <- answer[answer$Interval == interval,] #hope it finds it...
temp2 <- temp[2]
return(temp2)
}
impute <- function(row_feed){
condition <- is.na(row_feed)
if(condition[1]){
steps <- find_mean_steps(row_feed[2])
return (steps)
}
else{
steps <- row_feed[2]
return (steps)
}
}
answer
find_mean_steps(5)
for(i in 1:nrow(activity)){
new_activity_set <- impute(activity[i,])
}
new_activity_set
for(i in 1:nrow(activity)){
new_activity_set[i] <- impute(activity[i,])
}
warnings()
new_activity_set <- rep(NA,nrow(activity))
find_mean_steps <- function(interval){
temp <- answer[answer$Interval == interval,] #hope it finds it...
temp2 <- temp[2]
return(temp2)
}
impute <- function(row_feed){
condition <- is.na(row_feed)
if(condition[1]){
steps <- find_mean_steps(row_feed[2])
return (steps)
}
else{
steps <- row_feed[2]
return (steps)
}
}
for(i in 1:nrow(activity)){
new_activity_set[i] <- impute(activity[i,])
}
new_activity_sent
new_activity_set
head(new_activity_set)
activity[1,]
impute(activity[1,])
impute <- function(row_feed){
condition <- is.na(row_feed)
print("condition")
if(condition[1]){
steps <- find_mean_steps(row_feed[2])
return (steps)
}
else{
steps <- row_feed[2]
return (steps)
}
}
impute(activity[1,])
impute <- function(row_feed){
condition <- is.na(row_feed)
print("condition")
if(condition[1]){
print("if")
steps <- find_mean_steps(row_feed[2])
return (steps)
}
else{
print("else")
steps <- row_feed[2]
return (steps)
}
}
impute(activity[1,])
impute <- function(row_feed){
condition <- is.na(row_feed)
print("condition")
if(condition[1]){
print("if")
print(row_feed[2])
steps <- find_mean_steps(row_feed[2])
return (steps)
}
else{
print("else")
steps <- row_feed[2]
return (steps)
}
}
impute(activity[1,])
impute <- function(row_feed){
condition <- is.na(row_feed)
print("condition")
if(condition[1]){
print("if")
print(row_feed[2])
steps <- find_mean_steps(row_feed[3])
return (steps)
}
else{
print("else")
steps <- row_feed[3]
return (steps)
}
}
impute(activity[1,])
impute(activity[1,])
impute <- function(row_feed){
condition <- is.na(row_feed)
print("condition")
if(condition[1]){
print("if")
print(row_feed[3])
int_steps <- as.numeric(row_feed[3])
steps <- find_mean_steps(row_feed[3])
print(steps)
return (steps)
}
else{
print("else")
steps <- row_feed[3]
return (steps)
}
}
impute(activity[1,])
impute <- function(row_feed){
condition <- is.na(row_feed)
print("condition")
if(condition[1]){
print("if")
print(row_feed[3])
int_steps <- as.numeric(row_feed[3])
steps <- find_mean_steps(int_steps)
print(steps)
return (steps)
}
else{
print("else")
steps <- row_feed[3]
return (steps)
}
}
impute(activity[1,])
var1 <- impute(activity[1,])
var1
find_mean_steps <- function(interval){
temp <- answer[answer$Interval == interval,] #hope it finds it...
temp2 <- as.numeric(temp[2])
return(temp2)
}
var1 <- impute(activity[1,])
var1
new_activity_set <- rep(NA,nrow(activity))
find_mean_steps <- function(interval){
temp <- answer[answer$Interval == interval,] #hope it finds it...
temp2 <- as.numeric(temp[2])
return(temp2)
}
impute <- function(row_feed){
condition <- is.na(row_feed)
print("condition")
if(condition[1]){
print("if")
print(row_feed[3])
int_steps <- as.numeric(row_feed[3])
steps <- find_mean_steps(int_steps)
print(steps)
return (steps)
}
else{
print("else")
steps <- row_feed[3]
return (steps)
}
}
for(i in 1:nrow(activity)){
new_activity_set[i] <- impute(activity[i,])
}
new_activity_set
length(new_activity_set)
nrow(activity)
sum(is.na(new_activity_set))
new_activity_set
new_activity_set <- as.numeric(new_activity_set)
new_activity_set
#generate a numeric vector with same number of rows as the activity set
new_activity_set <- rep(NA,nrow(activity))
#poor function to output the average steps when inputting a 5 minute time interval.
#   the averaged 5 minute interval is not explicitly defined. use lexical scoping
#   "answer" is defined in the previous block.
find_mean_steps <- function(interval){
temp <- answer[answer$Interval == interval,] #hope it finds it...
temp2 <- as.numeric(temp[2])
return(temp2)
}
impute <- function(row_feed){
condition <- is.na(row_feed)
#print("condition")
if(condition[1]){
#print("if")
#print(row_feed[3])
int_steps <- as.numeric(row_feed[3])
steps <- find_mean_steps(int_steps)
#print(steps)
return (steps)
}
else{
#print("else")
steps <- row_feed[1]
return (steps)
}
}
for(i in 1:nrow(activity)){
new_activity_set[i] <- impute(activity[i,])
}
new_activity_set
new_activity_set <- as.numeric(new_activity_set)
new_activity_set
activity$steps
test111 <- activity$steps - new_activity_set
test111
activity_new <- cbind(new_activity_set,activity$date,activity$interval)
head(activity_new)
activity_new <- cbind(activity$date,activity$interval,new_activity_set)
head(activity_new)
activity_new <- cbind(new_activity_set,activity)
head(activity_new)
activity_new_steps <- as.numeric(new_activity_set)
activity_new <- cbind(activity_new_steps,activity)
head(activity_new)
hist(activity_new_steps)
summary(activity_new_steps)
summary(activity$steps)
hist(a,main="Total Number of Steps per Day",xlab = "Total Steps")
hist(activity_new_steps)
a_new <- tapply(activity_new$activity_new_steps,activity_new$date,sum, na.rm=TRUE)
hist(a_new,main="Total Number of Steps per Day",xlab = "Total Steps")
?par
par(mfcol  = c(2,1))
hist(a,main="Total Number of Steps per Day",xlab = "Total Steps")
hist(a,main="Total Number of Steps per Day",xlab = "Total Steps")
weekdays(2012-10-01)
weekdays("2012-10-01")
?weekday
?weekday?
?weekdays
strptime()
?strptime()
?date
a
a <- tapply(activity$steps,activity$date,sum, na.rm=TRUE)
a
a0 <- tapply(activity$steps,activity$interval,mean, na.rm=TRUE)
answer = as.data.frame(as.table(a0))
colnames(answer) <- c("Interval","AvgSteps")
#time_interval <- as.numeric(levels(answer$Interval))
#avg_steps <- as.numeric(answer$AvgSteps)
answer$Interval <- as.numeric(levels(answer$Interval))
answer$AvgSteps <- as.numeric(answer$AvgSteps)
#plot(answer$Interval,answer$AvgSteps,type="l")
#plot(time_interval,avg_steps,type="l", ylab ="Average Number of Steps", xlab="")
plot(answer$Interval,answer$AvgSteps,type="l", ylab ="Average Number of Steps", xlab="")
a0
strptime
strptime("2012-10-01","%Y-%m-%d")
hi3 <- strptime("2012-10-01","%Y-%m-%d")
weekdays(hi3)
hi4 <- strptime("2012-09-30","%Y-%m-%d")
weekdays(hi4)
activity_new
head(actiivty_new)
head(activity_new)
activity_new$date <- strptime(activity_new$date,"%Y-%m-%d")
head(activity_new)
activity_new$date[1]
weekdays(activity_new$date[1])
which_day <- weekdays(activity_new$date)
activity_new <- cbind(activity_new,which_day)
head(activity_new)
activity_new[5]
head(activity_new)
a_weekday <- subset(activity_new, which_day %in%  c("Monday","Tuesday","Wednesday","Thursday","Friday"))
a_weekend <- subset(activity_new, which_day %in%  c("Saturday","Sunday"))
plot()
plot(1,2)
plot(1,2)
plot(1,2)
a_weekday <- tapply(a_weekday$activity_new_steps,a_weekday$interval,mean, na.rm=TRUE)
answer_weekday = as.data.frame(as.table(a_weekday))
colnames(answer) <- c("Interval","AvgSteps")
answer_weekday$Interval <- as.numeric(levels(answer_weekday$Interval))
answer_weekday$AvgSteps <- as.numeric(answer_weekday$AvgSteps)
plot(answer$Interval,answer$AvgSteps,type="l", ylab ="Average Number of Steps", xlab="", main="Weekday Mean Steps")
answer_weekday
head(answer_weekday)
a_weekday <- tapply(a_weekday$activity_new_steps,a_weekday$interval,mean, na.rm=TRUE)
answer_weekday = as.data.frame(as.table(a_weekday))
colnames(answer_weekday) <- c("Interval","AvgSteps")
answer_weekday$Interval <- as.numeric(levels(answer_weekday$Interval))
answer_weekday$AvgSteps <- as.numeric(answer_weekday$AvgSteps)
plot(answer$Interval,answer$AvgSteps,type="l", ylab ="Average Number of Steps", xlab="", main="Weekday Mean Steps")
a_weekend <- tapply(a_weekend$activity_new_steps,a_weekend$interval,mean, na.rm=TRUE)
answer_weekend = as.data.frame(as.table(a_weekend))
colnames(answer_weekend) <- c("Interval","AvgSteps")
answer_weekend$Interval <- as.numeric(levels(answer_weekend$Interval))
answer_weekend$AvgSteps <- as.numeric(answer_weekend$AvgSteps)
plot(answer$Interval,answer$AvgSteps,type="l", ylab ="Average Number of Steps", xlab="", main="Weekend Mean Steps")
a_weekday <- tapply(a_weekday$activity_new_steps,a_weekday$interval,mean, na.rm=TRUE)
answer_weekday = as.data.frame(as.table(a_weekday))
colnames(answer_weekday) <- c("Interval","AvgSteps")
answer_weekday$Interval <- as.numeric(levels(answer_weekday$Interval))
answer_weekday$AvgSteps <- as.numeric(answer_weekday$AvgSteps)
plot(answer$Interval,answer$AvgSteps,type="l", ylab ="Average Number of Steps", xlab="", main="Weekday Mean Steps")
a_weekday
head(a_weekday)
a_weekday <- subset(activity_new, which_day %in%  c("Monday","Tuesday","Wednesday","Thursday","Friday"))
head(a_weekday)
a_weekday <- tapply(a_weekday$activity_new_steps,a_weekday$interval,mean, na.rm=TRUE)
answer_weekday = as.data.frame(as.table(a_weekday))
colnames(answer_weekday) <- c("Interval","AvgSteps")
answer_weekday$Interval <- as.numeric(levels(answer_weekday$Interval))
answer_weekday$AvgSteps <- as.numeric(answer_weekday$AvgSteps)
plot(answer$Interval,answer$AvgSteps,type="l", ylab ="Average Number of Steps", xlab="", main="Weekday Mean Steps")
#weekend plot
a_weekend <- tapply(a_weekend$activity_new_steps,a_weekend$interval,mean, na.rm=TRUE)
answer_weekend = as.data.frame(as.table(a_weekend))
colnames(answer_weekend) <- c("Interval","AvgSteps")
answer_weekend$Interval <- as.numeric(levels(answer_weekend$Interval))
answer_weekend$AvgSteps <- as.numeric(answer_weekend$AvgSteps)
plot(answer$Interval,answer$AvgSteps,type="l", ylab ="Average Number of Steps", xlab="", main="Weekend Mean Steps")
plot(answer$Interval,answer$AvgSteps,type="l", ylab ="Average Number of Steps", xlab="", main="Weekday Mean Steps")
plot(answer_weekday$Interval,answer_weekday$AvgSteps,type="l", ylab ="Average Number of Steps", xlab="", main="Weekday Mean Steps")
plot(answer_weekday$Interval,answer_weekday$AvgSteps,type="l", ylab ="Average Number of Steps", xlab="", main="Weekday Mean Steps")
plot(answer_weekend$Interval,answer_weekend$AvgSteps,type="l", ylab ="Average Number of Steps", xlab="", main="Weekend Mean Steps")
